
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Jun 05 00:31:43 CST 2021
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import codigo.TablaSimbolos;
import java.util.List;
import codigo.TablaSimbolosParser;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Jun 05 00:31:43 CST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\035\002\000\002\002" +
    "\006\000\002\017\004\000\002\036\002\000\002\015\006" +
    "\000\002\022\005\000\002\037\002\000\002\016\006\000" +
    "\002\024\003\000\002\024\004\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\023\016\000" +
    "\002\023\005\000\002\014\005\000\002\040\002\000\002" +
    "\011\006\000\002\041\002\000\002\011\011\000\002\042" +
    "\002\000\002\007\006\000\002\043\002\000\002\007\007" +
    "\000\002\044\002\000\002\020\007\000\002\045\002\000" +
    "\002\021\007\000\002\010\003\000\002\010\004\000\002" +
    "\003\005\000\002\003\005\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\046\002\000\002\006\006" +
    "\000\002\047\002\000\002\006\006\000\002\006\003\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\003\000\002\006\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\006\000\002\005\006\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\025\005\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\050\002\000\002\051\002" +
    "\000\002\012\007\000\002\033\005\000\002\033\006\000" +
    "\002\033\006\000\002\032\003\000\002\032\005\000\002" +
    "\032\005\000\002\032\005\000\002\032\007\000\002\032" +
    "\007\000\002\031\003\000\002\031\003\000\002\031\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\004\005\001\002\000\004\002\231\001" +
    "\002\000\004\006\000\001\002\000\004\006\011\001\002" +
    "\000\004\011\021\001\002\000\004\005\020\001\002\000" +
    "\004\010\ufffd\001\002\000\004\010\014\001\002\000\004" +
    "\007\017\001\002\000\004\023\015\001\002\000\004\050" +
    "\016\001\002\000\004\007\ufffb\001\002\000\004\011\ufffc" +
    "\001\002\000\004\002\uffff\001\002\000\040\013\ufffa\017" +
    "\ufffa\021\ufffa\027\ufffa\031\ufffa\032\ufffa\040\ufffa\042\ufffa" +
    "\043\ufffa\045\ufffa\047\ufffa\050\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\001\002\000\004\005\ufffe\001\002\000\040\013\031" +
    "\017\037\021\033\027\052\031\026\032\047\040\027\042" +
    "\042\043\050\045\032\047\043\050\044\057\040\060\051" +
    "\061\041\001\002\000\004\050\215\001\002\000\042\012" +
    "\ufff5\013\ufff5\017\ufff5\021\ufff5\027\ufff5\031\ufff5\032\ufff5" +
    "\040\ufff5\042\ufff5\043\ufff5\045\ufff5\047\ufff5\050\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\001\002\000\014\023\063\024\062" +
    "\025\061\026\060\056\064\001\002\000\004\023\213\001" +
    "\002\000\042\012\uffee\013\uffee\017\uffee\021\uffee\027\uffee" +
    "\031\uffee\032\uffee\040\uffee\042\uffee\043\uffee\045\uffee\047" +
    "\uffee\050\uffee\057\uffee\060\uffee\061\uffee\001\002\000\006" +
    "\015\uffe9\044\uffe7\001\002\000\042\012\uffef\013\uffef\017" +
    "\uffef\021\uffef\027\uffef\031\uffef\032\uffef\040\uffef\042\uffef" +
    "\043\uffef\045\uffef\047\uffef\050\uffef\057\uffef\060\uffef\061" +
    "\uffef\001\002\000\006\046\150\052\147\001\002\000\042" +
    "\012\ufff3\013\ufff3\017\ufff3\021\ufff3\027\ufff3\031\ufff3\032" +
    "\ufff3\040\ufff3\042\ufff3\043\ufff3\045\ufff3\047\ufff3\050\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\001\002\000\042\012\ufff8\013" +
    "\ufff8\017\ufff8\021\ufff8\027\ufff8\031\ufff8\032\ufff8\040\ufff8" +
    "\042\ufff8\043\ufff8\045\ufff8\047\ufff8\050\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\001\002\000\042\012\ufff1\013\ufff1\017\ufff1" +
    "\021\ufff1\027\ufff1\031\ufff1\032\ufff1\040\ufff1\042\ufff1\043" +
    "\ufff1\045\ufff1\047\ufff1\050\ufff1\057\ufff1\060\ufff1\061\ufff1" +
    "\001\002\000\004\062\uffbc\001\002\000\004\050\uffaf\001" +
    "\002\000\004\050\uffae\001\002\000\004\027\uffe1\001\002" +
    "\000\012\027\052\031\026\032\047\047\043\001\002\000" +
    "\004\023\131\001\002\000\042\012\ufff2\013\ufff2\017\ufff2" +
    "\021\ufff2\027\ufff2\031\ufff2\032\ufff2\040\ufff2\042\ufff2\043" +
    "\ufff2\045\ufff2\047\ufff2\050\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\001\002\000\042\012\ufff6\013\ufff6\017\ufff6\021\ufff6\027" +
    "\ufff6\031\ufff6\032\ufff6\040\ufff6\042\ufff6\043\ufff6\045\ufff6" +
    "\047\ufff6\050\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002\000" +
    "\014\023\063\024\062\025\061\026\060\056\064\001\002" +
    "\000\004\027\uffdf\001\002\000\004\050\uffb0\001\002\000" +
    "\012\027\052\031\026\032\047\047\043\001\002\000\042" +
    "\012\ufff4\013\ufff4\017\ufff4\021\ufff4\027\ufff4\031\ufff4\032" +
    "\ufff4\040\ufff4\042\ufff4\043\ufff4\045\ufff4\047\ufff4\050\ufff4" +
    "\057\ufff4\060\ufff4\061\ufff4\001\002\000\042\012\uffed\013" +
    "\uffed\017\uffed\021\uffed\027\uffed\031\uffed\032\uffed\040\uffed" +
    "\042\uffed\043\uffed\045\uffed\047\uffed\050\uffed\057\uffed\060" +
    "\uffed\061\uffed\001\002\000\042\012\070\013\031\017\037" +
    "\021\033\027\052\031\026\032\047\040\027\042\042\043" +
    "\050\045\032\047\043\050\044\057\040\060\051\061\041" +
    "\001\002\000\054\012\ufff0\013\ufff0\017\ufff0\021\ufff0\023" +
    "\063\024\062\025\061\026\060\027\ufff0\031\ufff0\032\ufff0" +
    "\040\ufff0\042\ufff0\043\ufff0\045\ufff0\047\ufff0\050\ufff0\056" +
    "\064\057\ufff0\060\ufff0\061\ufff0\001\002\000\006\031\065" +
    "\032\066\001\002\000\006\031\uffbe\032\uffbe\001\002\000" +
    "\006\031\uffbf\032\uffbf\001\002\000\006\031\uffc0\032\uffc0" +
    "\001\002\000\006\031\uffc1\032\uffc1\001\002\000\006\031" +
    "\uffbd\032\uffbd\001\002\000\064\012\uffc5\013\uffc5\016\uffc5" +
    "\017\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\045\uffc5\047\uffc5\050\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\001\002\000\064\012\uffc4\013\uffc4" +
    "\016\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\045\uffc4\047\uffc4\050\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\001\002\000\042\012\ufff7" +
    "\013\ufff7\017\ufff7\021\ufff7\027\ufff7\031\ufff7\032\ufff7\040" +
    "\ufff7\042\ufff7\043\ufff7\045\ufff7\047\ufff7\050\ufff7\057\ufff7" +
    "\060\ufff7\061\ufff7\001\002\000\004\005\ufff9\001\002\000" +
    "\016\023\063\024\062\025\061\026\060\030\072\056\064" +
    "\001\002\000\064\012\uffc8\013\uffc8\016\uffc8\017\uffc8\021" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\040\uffc8\041\uffc8\042\uffc8\043" +
    "\uffc8\045\uffc8\047\uffc8\050\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\001\002\000\004\027\074\001\002\000\016\027" +
    "\052\031\075\032\101\033\102\047\077\050\076\001\002" +
    "\000\034\016\uffd8\023\063\024\062\025\061\026\060\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\040\uffd8\041\uffd8\050\uffd8" +
    "\056\064\001\002\000\022\016\uffd9\030\uffd9\031\uffd9\032" +
    "\uffd9\033\uffd9\040\uffd9\041\uffd9\050\uffd9\001\002\000\012" +
    "\027\052\031\115\032\117\047\043\001\002\000\034\016" +
    "\uffd2\023\063\024\062\025\061\026\060\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\040\uffd2\041\uffd2\050\uffd2\056\064\001" +
    "\002\000\034\016\uffd7\023\063\024\062\025\061\026\060" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\040\uffd7\041\uffd7\050" +
    "\uffd7\056\064\001\002\000\022\016\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\040\uffce\041\uffce\050\uffce\001\002\000" +
    "\014\030\106\031\105\032\110\033\107\050\104\001\002" +
    "\000\022\016\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\040" +
    "\uffd1\041\uffd1\050\uffd1\001\002\000\022\016\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\040\uffd0\041\uffd0\050\uffd0\001" +
    "\002\000\042\012\uffde\013\uffde\017\uffde\021\uffde\027\uffde" +
    "\031\uffde\032\uffde\040\uffde\042\uffde\043\uffde\045\uffde\047" +
    "\uffde\050\uffde\057\uffde\060\uffde\061\uffde\001\002\000\022" +
    "\016\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\040\uffcd\041" +
    "\uffcd\050\uffcd\001\002\000\022\016\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\040\uffcf\041\uffcf\050\uffcf\001\002\000" +
    "\006\031\112\032\113\001\002\000\064\012\uffc9\013\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\045\uffc9\047\uffc9\050\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\001\002\000\066\012\uffcb" +
    "\013\uffcb\016\uffcb\017\uffcb\021\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\045\uffcb\047\uffcb\050" +
    "\uffcb\053\114\056\uffcb\057\uffcb\060\uffcb\061\uffcb\001\002" +
    "\000\064\012\uffc6\013\uffc6\016\uffc6\017\uffc6\021\uffc6\023" +
    "\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6" +
    "\032\uffc6\033\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\045" +
    "\uffc6\047\uffc6\050\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6" +
    "\001\002\000\016\023\063\024\062\025\061\026\060\047" +
    "\uffd6\056\064\001\002\000\016\023\063\024\062\025\061" +
    "\026\060\047\122\056\064\001\002\000\016\023\063\024" +
    "\062\025\061\026\060\047\uffd4\056\064\001\002\000\004" +
    "\047\121\001\002\000\022\016\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\040\uffd3\041\uffd3\050\uffd3\001\002\000\064" +
    "\012\uffc3\013\uffc3\016\uffc3\017\uffc3\021\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\045\uffc3\047" +
    "\uffc3\050\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\001\002" +
    "\000\006\031\126\032\127\001\002\000\004\047\125\001" +
    "\002\000\022\016\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\040\uffd5\041\uffd5\050\uffd5\001\002\000\066\012\uffcc\013" +
    "\uffcc\016\uffcc\017\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\045\uffcc\047\uffcc\050\uffcc" +
    "\053\130\056\uffcc\057\uffcc\060\uffcc\061\uffcc\001\002\000" +
    "\064\012\uffca\013\uffca\016\uffca\017\uffca\021\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045\uffca" +
    "\047\uffca\050\uffca\056\uffca\057\uffca\060\uffca\061\uffca\001" +
    "\002\000\064\012\uffc7\013\uffc7\016\uffc7\017\uffc7\021\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\045\uffc7\047\uffc7\050\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\001\002\000\012\027\052\031\132\032\134\047\043" +
    "\001\002\000\016\023\063\024\062\025\061\026\060\053" +
    "\136\056\064\001\002\000\054\012\uffc2\013\uffc2\017\uffc2" +
    "\021\uffc2\023\063\024\062\025\061\026\060\027\uffc2\031" +
    "\uffc2\032\uffc2\040\uffc2\042\uffc2\043\uffc2\045\uffc2\047\uffc2" +
    "\050\uffc2\056\064\057\uffc2\060\uffc2\061\uffc2\001\002\000" +
    "\016\023\063\024\062\025\061\026\060\053\135\056\064" +
    "\001\002\000\042\012\uffb7\013\uffb7\017\uffb7\021\uffb7\027" +
    "\uffb7\031\uffb7\032\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7" +
    "\047\uffb7\050\uffb7\057\uffb7\060\uffb7\061\uffb7\001\002\000" +
    "\042\012\uffb8\013\uffb8\017\uffb8\021\uffb8\027\uffb8\031\uffb8" +
    "\032\uffb8\040\uffb8\042\uffb8\043\uffb8\045\uffb8\047\uffb8\050" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\001\002\000\004\027\140" +
    "\001\002\000\016\027\052\031\075\032\101\033\102\047" +
    "\077\050\076\001\002\000\014\030\142\031\105\032\110" +
    "\033\107\050\104\001\002\000\042\012\uffe0\013\uffe0\017" +
    "\uffe0\021\uffe0\027\uffe0\031\uffe0\032\uffe0\040\uffe0\042\uffe0" +
    "\043\uffe0\045\uffe0\047\uffe0\050\uffe0\057\uffe0\060\uffe0\061" +
    "\uffe0\001\002\000\004\062\144\001\002\000\004\020\uffbb" +
    "\001\002\000\004\020\146\001\002\000\042\012\uffba\013" +
    "\uffba\017\uffba\021\uffba\027\uffba\031\uffba\032\uffba\040\uffba" +
    "\042\uffba\043\uffba\045\uffba\047\uffba\050\uffba\057\uffba\060" +
    "\uffba\061\uffba\001\002\000\004\022\163\001\002\000\004" +
    "\023\151\001\002\000\016\027\052\031\075\032\101\033" +
    "\102\047\077\050\076\001\002\000\014\031\105\032\110" +
    "\033\107\040\027\050\104\001\002\000\004\037\154\001" +
    "\002\000\004\051\155\001\002\000\004\031\156\001\002" +
    "\000\004\036\157\001\002\000\004\051\160\001\002\000" +
    "\004\031\161\001\002\000\004\022\162\001\002\000\046" +
    "\012\uffec\013\uffec\016\uffec\017\uffec\021\uffec\027\uffec\031" +
    "\uffec\032\uffec\040\uffec\041\uffec\042\uffec\043\uffec\045\uffec" +
    "\047\uffec\050\uffec\057\uffec\060\uffec\061\uffec\001\002\000" +
    "\046\012\uffeb\013\uffeb\016\uffeb\017\uffeb\021\uffeb\027\uffeb" +
    "\031\uffeb\032\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\045" +
    "\uffeb\047\uffeb\050\uffeb\057\uffeb\060\uffeb\061\uffeb\001\002" +
    "\000\004\015\171\001\002\000\004\044\166\001\002\000" +
    "\004\023\167\001\002\000\004\031\170\001\002\000\004" +
    "\015\171\001\002\000\004\041\uffe5\001\002\000\006\014" +
    "\173\015\174\001\002\000\042\012\uffe6\013\uffe6\017\uffe6" +
    "\021\uffe6\027\uffe6\031\uffe6\032\uffe6\040\uffe6\042\uffe6\043" +
    "\uffe6\045\uffe6\047\uffe6\050\uffe6\057\uffe6\060\uffe6\061\uffe6" +
    "\001\002\000\004\041\uffe3\001\002\000\004\041\176\001" +
    "\002\000\004\023\203\001\002\000\006\016\uffdd\041\uffdd" +
    "\001\002\000\006\016\201\041\176\001\002\000\006\014" +
    "\uffe2\015\uffe2\001\002\000\006\016\uffdc\041\uffdc\001\002" +
    "\000\020\021\033\027\052\031\075\032\101\033\102\047" +
    "\077\050\076\001\002\000\006\016\uffda\041\uffda\001\002" +
    "\000\016\016\uffdb\031\105\032\110\033\107\041\uffdb\050" +
    "\104\001\002\000\004\041\176\001\002\000\006\016\210" +
    "\041\176\001\002\000\006\014\uffe4\015\uffe4\001\002\000" +
    "\006\014\212\015\174\001\002\000\042\012\uffe8\013\uffe8" +
    "\017\uffe8\021\uffe8\027\uffe8\031\uffe8\032\uffe8\040\uffe8\042" +
    "\uffe8\043\uffe8\045\uffe8\047\uffe8\050\uffe8\057\uffe8\060\uffe8" +
    "\061\uffe8\001\002\000\004\035\214\001\002\000\044\012" +
    "\uffea\013\uffea\017\uffea\021\uffea\027\uffea\031\uffea\032\uffea" +
    "\037\uffea\040\uffea\042\uffea\043\uffea\045\uffea\047\uffea\050" +
    "\uffea\057\uffea\060\uffea\061\uffea\001\002\000\010\023\221" +
    "\053\uffb6\054\220\001\002\000\004\053\217\001\002\000" +
    "\042\012\uffb9\013\uffb9\017\uffb9\021\uffb9\027\uffb9\031\uffb9" +
    "\032\uffb9\040\uffb9\042\uffb9\043\uffb9\045\uffb9\047\uffb9\050" +
    "\uffb9\057\uffb9\060\uffb9\061\uffb9\001\002\000\004\050\215" +
    "\001\002\000\006\031\222\032\223\001\002\000\006\053" +
    "\uffb5\054\226\001\002\000\006\053\uffb4\054\224\001\002" +
    "\000\004\050\215\001\002\000\004\053\uffb1\001\002\000" +
    "\004\050\215\001\002\000\004\053\uffb2\001\002\000\004" +
    "\053\uffb3\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\227\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\035\005\001\001\000\006\015\006\017\007\001\001" +
    "\000\004\016\021\001\001\000\002\001\001\000\004\036" +
    "\011\001\001\000\004\022\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\022\001\001" +
    "\000\002\001\001\000\032\005\055\011\045\012\024\013" +
    "\034\014\052\020\044\021\035\023\033\024\054\025\027" +
    "\031\023\033\053\001\001\000\004\032\215\001\001\000" +
    "\002\001\001\000\004\004\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\163\041\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\136\001\001" +
    "\000\004\005\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\110\001\001\000\004" +
    "\045\072\001\001\000\002\001\001\000\004\005\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\005\055" +
    "\011\045\012\024\013\066\014\052\020\044\021\035\023" +
    "\033\025\027\031\023\033\053\001\001\000\004\004\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\077\006\102\001\001\000" +
    "\004\004\122\001\001\000\002\001\001\000\004\005\115" +
    "\001\001\000\004\004\056\001\001\000\004\004\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\122\046\123\001" +
    "\001\000\004\004\056\001\001\000\006\004\110\047\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\132\001\001\000\004\004\122\001\001\000\004" +
    "\004\056\001\001\000\004\004\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\077" +
    "\006\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\051\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\077\006\151\001\001\000\004\014\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\171\001\001\000\004\042\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\174" +
    "\001\001\000\006\003\176\010\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\077\006\204\023" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\176\010\206\001\001\000\004\003\201\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\032\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\224\001\001\000\002\001\001\000\004\032\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

TablaSimbolosParser tS = new TablaSimbolosParser();


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // S_TIPO ::= FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setTipo(String.valueOf(f)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // S_TIPO ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setTipo(String.valueOf(s)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // S_TIPO ::= INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setTipo(String.valueOf(i)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_TIPO",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // S_VAR ::= TEXTO Signo_Igual Numero_Decimal COMA S_VAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		  
parser.tS.buscar(String.valueOf(b),parser.tS.tipo);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_VAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // S_VAR ::= TEXTO Signo_Igual Numero COMA S_VAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		  
parser.tS.buscar(String.valueOf(b),parser.tS.tipo);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_VAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // S_VAR ::= TEXTO COMA S_VAR 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  
parser.tS.buscar(String.valueOf(b),parser.tS.tipo);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_VAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // S_VAR ::= TEXTO Signo_Igual Numero_Decimal 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  
parser.tS.buscar(String.valueOf(b),parser.tS.tipo);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_VAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // S_VAR ::= TEXTO Signo_Igual Numero 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		  
parser.tS.buscar(String.valueOf(b),parser.tS.tipo);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_VAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // S_VAR ::= TEXTO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 
       parser.tS.buscar(String.valueOf(b),parser.tS.tipo);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_VAR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // S_DECLARACION ::= TEXTO Signo_Igual Numero_Decimal PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.tS.asignar(String.valueOf(a),String.valueOf(b)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // S_DECLARACION ::= TEXTO Signo_Igual Numero PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.tS.asignar(String.valueOf(a),String.valueOf(b)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // S_DECLARACION ::= S_TIPO S_VAR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_DECLARACION",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // S_LISTA ::= LIST_INICIO NT$11 LISTA NT$12 LIST_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.tS.getResultado().add("</ol>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_LISTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$12 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.tS.getResultado().add(parser.tS.tLista(String.valueOf(l))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$12",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$11 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<ol>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$11",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // S_OPERADOR ::= SIGNO_DIVISION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setOperador(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // S_OPERADOR ::= SIGNO_MULTIPLICACION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setOperador(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // S_OPERADOR ::= SIGNO_RESTA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setOperador(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // S_OPERADOR ::= SIGNO_SUMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setOperador(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // S_OPERADOR ::= Signo_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_OPERADOR",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // S_ASIGNACION ::= TEXTO Signo_Igual S_CALCULO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.tS.asignar(String.valueOf(a),String.valueOf(parser.tS.getScalculo())); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ASIGNACION",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // S_CALCULO ::= COMILLA S_CALCULO COMILLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // S_CALCULO ::= S_CALCULO S_OPERADOR Numero_Decimal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // S_CALCULO ::= S_CALCULO S_OPERADOR Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // S_CALCULO ::= Numero_Decimal S_OPERADOR Numero_Decimal PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.tS.getResultado().add(parser.tS.calculo(String.valueOf(a),String.valueOf(parser.tS.getOperador()),String.valueOf(b))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // S_CALCULO ::= Numero S_OPERADOR Numero PUNTO_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 parser.tS.getResultado().add(parser.tS.calculo(String.valueOf(a),String.valueOf(parser.tS.getOperador()),String.valueOf(b))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // S_CALCULO ::= AbreParentesis S_CALCULO CierraParentesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // S_CALCULO ::= Numero_Decimal S_OPERADOR Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add(parser.tS.calculo(String.valueOf(a),String.valueOf(parser.tS.getOperador()),String.valueOf(b))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // S_CALCULO ::= Numero S_OPERADOR Numero_Decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add(parser.tS.calculo(String.valueOf(a),String.valueOf(parser.tS.getOperador()),String.valueOf(b))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // S_CALCULO ::= Numero_Decimal S_OPERADOR Numero_Decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add(parser.tS.calculo(String.valueOf(a),String.valueOf(parser.tS.getOperador()),String.valueOf(b))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // S_CALCULO ::= Numero S_OPERADOR Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add(parser.tS.calculo(String.valueOf(a),String.valueOf(parser.tS.getOperador()),String.valueOf(b))); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CALCULO",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // S_ID ::= S_ID Email 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // S_ID ::= Email 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		  parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // S_ID ::= S_ID Numero_Decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // S_ID ::= S_ID Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // S_ID ::= S_ID TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // S_ID ::= S_CALCULO 
            {
              Object RESULT =null;
		 parser.tS.setSid(parser.tS.getScalculo()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // S_ID ::= COMILLA Numero_Decimal NT$10 COMILLA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$10",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // S_ID ::= COMILLA Numero NT$9 COMILLA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$9",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // S_ID ::= Numero_Decimal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // S_ID ::= Numero 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // S_ID ::= TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.setSid(String.valueOf(a)); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ID",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // S_COLUMNA ::= ETIQUETA_COLUMNA Signo_Igual S_IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_COLUMNA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // S_COLUMNA ::= ETIQUETA_COLUMNA Signo_Igual S_ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add("<td>"+parser.tS.getSid()+"</td>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_COLUMNA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // S_COLUMNAS ::= S_COLUMNAS S_COLUMNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_COLUMNAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // S_COLUMNAS ::= S_COLUMNA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_COLUMNAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // S_IMPRIMIR ::= ETIQUETA_IMPRIMIR NT$8 AbreParentesis S_ID CierraParentesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 parser.tS.getResultado().add(parser.tS.getScalculo()+"</h1>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_IMPRIMIR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$8 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<h1>");  
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$8",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S_NEGRITA ::= ETIQUETA_NEGRITA NT$7 AbreParentesis S_ID CierraParentesis 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		 parser.tS.getResultado().add(parser.tS.getSid()+"</strong>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_NEGRITA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$7 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<strong>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$7",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // S_FILA ::= S_FILA ROW_INICIO NT$6 S_COLUMNAS ROW_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.tS.getResultado().add("</tr>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_FILA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$6 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<tr>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$6",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // S_FILA ::= ROW_INICIO NT$5 S_COLUMNAS ROW_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.tS.getResultado().add("</tr>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_FILA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$5 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<tr>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$5",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // S_TABLA ::= TABLE_INICIO NT$4 ETIQUETA_BORDE Signo_Igual Numero S_FILA TABLE_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		 parser.tS.getResultado().add("</table>");   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_TABLA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$4 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<table border=1>");   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$4",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S_TABLA ::= TABLE_INICIO NT$3 S_FILA TABLE_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.tS.getResultado().add("</table>");   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_TABLA",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<table>");   
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$3",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S_ENLACE ::= ETIQUETA_ENLACE Signo_Igual Link 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add("<a href="+a+"> enlace </a>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_ENLACE",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S_IMAGE ::= IMAGE_INICIO IMAGEN_FOTO IMAGE_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_IMAGE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S_IMAGE ::= IMAGE_INICIO NOMBRE Signo_Igual S_ID S_ENLACE ETIQUETA_ANCHO DOS_PUNTOS Numero ETIQUETA_ALTURA DOS_PUNTOS Numero IMAGE_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_IMAGE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S_CUERPO ::= S_DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S_CUERPO ::= S_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S_CUERPO ::= ETIQUETA_PRUEBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S_CUERPO ::= S_CALCULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S_CUERPO ::= S_IMPRIMIR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S_CUERPO ::= S_NEGRITA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S_CUERPO ::= S_IMAGE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S_CUERPO ::= S_ENLACE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S_CUERPO ::= S_LISTA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S_CUERPO ::= S_TABLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S_CUERPOX ::= S_CUERPOX S_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPOX",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S_CUERPOX ::= S_CUERPO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_CUERPOX",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S_BODY ::= BODY_INICIO NT$2 S_CUERPOX BODY_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add("</body>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_BODY",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
 parser.tS.getResultado().add("<body>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S_TITULO ::= TITLE Signo_Igual TEXTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 parser.tS.getResultado().add("<title>"+String.valueOf(a)+"</title>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_TITULO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S_HEAD ::= HEADER_INICIO NT$1 S_TITULO HEADER_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.tS.getResultado().add("</head>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_HEAD",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<head>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S_HTML ::= S_HEAD S_BODY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("S_HTML",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= HTML_INICIO NT$0 S_HTML HTML_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		 parser.tS.getResultado().add("</html>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.tS.getResultado().add("<html>"); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

