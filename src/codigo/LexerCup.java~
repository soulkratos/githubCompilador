/* The following code was generated by JFlex 1.4.3 on 5/06/21 12:29 AM */

package codigo;

import java_cup.runtime.Symbol;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 5/06/21 12:29 AM from the specification file
 * <tt>D:/NetBeansProjects/COMPILADOR_PROYECTO/COMPILADOR_PROYECTO/src/codigo/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 11, 12,  0,  0, 11,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  4,  0,  0,  0,  6,  0, 47, 48, 45, 43, 10, 44,  3,  8, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 49,  7,  0, 46,  0,  0, 
     5, 23, 24, 22, 26, 21, 20, 32, 16, 13,  1,  1, 19, 18, 14, 27, 
    30,  1, 29, 31, 17, 28,  1,  1, 33,  1, 25,  0,  0,  0,  0, 15, 
     0, 42,  1,  1,  1, 36,  1, 37,  1, 39,  1,  1, 40,  1, 34, 41, 
     1, 50, 38,  1, 35, 51,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\4\1\5\1\6\1\2\1\7"+
    "\1\10\2\11\14\3\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\4\0\1\3\3\0\2\11\23\3\5\0"+
    "\1\11\6\3\1\21\16\3\1\22\6\0\1\11\11\3"+
    "\1\23\12\3\1\0\1\1\5\0\1\11\12\3\1\24"+
    "\4\3\1\25\1\3\1\26\2\3\3\0\1\27\5\0"+
    "\1\11\5\3\1\30\4\3\1\31\3\3\1\32\1\33"+
    "\1\34\7\0\1\11\3\3\1\35\1\36\7\3\1\37"+
    "\1\3\1\0\1\40\4\0\1\11\1\41\2\3\1\42"+
    "\1\43\1\3\1\44\1\3\1\45\1\46\3\3\1\47"+
    "\1\0\1\47\2\0\4\47\1\50\1\3\1\51\1\52"+
    "\1\3\1\53\1\3\3\47\1\0\10\47\1\54\1\3"+
    "\1\55\6\47\1\0\1\3\4\47\1\0\2\3\5\47"+
    "\1\0\2\3\2\47\1\0\2\47\1\56\1\57\6\47"+
    "\1\0\5\47\2\0\2\47\12\0\1\47\1\0\10\47"+
    "\3\0\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\64"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\64"+
    "\0\64\0\64\0\64\0\64\0\64\0\64\0\u0478\0\u0104"+
    "\0\u04ac\0\u04e0\0\64\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750\0\u0784"+
    "\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924"+
    "\0\u0958\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4"+
    "\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\150"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\150\0\u0f3c"+
    "\0\u0f70\0\u0fa4\0\u0fd8\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc"+
    "\0\u1110\0\u1144\0\u1178\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c"+
    "\0\u12b0\0\u12e4\0\u1318\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c"+
    "\0\u1450\0\u1484\0\u14b8\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc"+
    "\0\u15f0\0\u1624\0\u1658\0\u168c\0\u16c0\0\u16f4\0\u1728\0\u175c"+
    "\0\u1790\0\u17c4\0\u17f8\0\u182c\0\150\0\u1860\0\u1894\0\u18c8"+
    "\0\u18fc\0\150\0\u1930\0\150\0\u1964\0\u1998\0\u19cc\0\u1a00"+
    "\0\u1a34\0\64\0\u1a68\0\u1a9c\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c"+
    "\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70\0\150\0\u1ca4\0\u1cd8"+
    "\0\u1d0c\0\u1d40\0\150\0\u1d74\0\u1da8\0\u1ddc\0\150\0\150"+
    "\0\150\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\u1fb0\0\u1fe4\0\u2018\0\150\0\150\0\u204c\0\u2080"+
    "\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\150\0\u21b8\0\u21ec"+
    "\0\64\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\150\0\u2324"+
    "\0\u2358\0\150\0\150\0\u238c\0\150\0\u23c0\0\150\0\150"+
    "\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4\0\u24f8\0\u252c\0\u2560"+
    "\0\u2594\0\u25c8\0\u25fc\0\u2630\0\150\0\u2664\0\150\0\150"+
    "\0\u2698\0\150\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0"+
    "\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\150"+
    "\0\u2970\0\150\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8"+
    "\0\u2adc\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48"+
    "\0\u2c7c\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8"+
    "\0\u2e1c\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\150\0\150"+
    "\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0"+
    "\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260"+
    "\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364\0\u3398\0\u33cc\0\u3400"+
    "\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c\0\u35a0"+
    "\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\2\12\1\14\1\15\2\3\1\16"+
    "\1\3\1\17\1\20\1\21\1\22\1\23\1\24\5\3"+
    "\1\25\1\26\1\3\1\27\11\3\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\2\3\65\0\1\3\10\0"+
    "\1\37\2\0\36\3\7\0\2\3\2\0\1\4\1\5"+
    "\62\0\2\5\61\0\1\40\1\41\1\42\1\43\1\44"+
    "\3\0\1\45\3\0\36\40\7\0\2\40\62\0\1\46"+
    "\11\0\1\47\64\0\4\12\60\0\4\50\50\0\1\3"+
    "\10\0\1\37\2\0\1\3\1\51\3\3\1\52\17\3"+
    "\1\53\10\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\10\3\1\54\5\3\1\55\17\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\1\56\11\3\1\57"+
    "\23\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\1\60\35\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\1\61\32\3\1\62\2\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\1\3\1\63\34\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\16\3\1\64"+
    "\1\65\16\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\1\3\1\66\4\3\1\67\27\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\16\3\1\70\17\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\20\3"+
    "\1\71\15\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\26\3\1\72\7\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\24\3\1\73\11\3\7\0\2\3"+
    "\11\0\4\74\50\0\2\41\2\0\1\44\7\0\36\41"+
    "\7\0\2\41\1\0\1\42\1\0\1\75\11\0\36\42"+
    "\7\0\2\42\1\0\1\76\13\0\36\76\7\0\2\76"+
    "\1\0\1\45\2\0\1\43\10\0\36\45\7\0\2\45"+
    "\63\0\1\77\14\47\1\0\47\47\1\0\1\100\7\0"+
    "\1\50\1\101\2\50\36\100\7\0\2\100\1\0\1\3"+
    "\10\0\1\37\2\0\1\102\35\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\12\3\1\103\6\3\1\104"+
    "\14\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\26\3\1\105\7\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\23\3\1\106\12\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\5\3\1\107\30\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\4\3\1\110"+
    "\31\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\13\3\1\111\22\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\22\3\1\112\13\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\1\3\1\113\4\3\1\114"+
    "\27\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\34\3\1\115\1\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\6\3\1\116\2\3\1\117\24\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\6\3\1\120"+
    "\27\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\10\3\1\121\25\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\11\3\1\122\24\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\4\3\1\123\31\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\20\3\1\124"+
    "\15\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\17\3\1\125\16\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\31\3\1\126\4\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\24\3\1\127\11\3\7\0"+
    "\2\3\1\0\1\100\7\0\1\74\1\130\2\74\36\100"+
    "\7\0\2\100\1\0\1\75\4\0\1\131\1\0\1\132"+
    "\4\0\36\75\7\0\2\75\1\0\1\76\1\0\1\133"+
    "\11\0\36\76\7\0\2\76\51\0\1\134\13\0\1\100"+
    "\10\0\1\135\2\0\36\100\7\0\2\100\1\0\1\100"+
    "\7\0\4\136\36\100\7\0\2\100\1\0\1\3\10\0"+
    "\1\37\2\0\2\3\1\137\33\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\23\3\1\140\12\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\20\3\1\141"+
    "\15\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\27\3\1\142\6\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\20\3\1\143\15\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\13\3\1\144\22\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\6\3\1\145"+
    "\27\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\4\3\1\146\31\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\2\3\1\147\33\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\12\3\1\150\23\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\35\3\1\151"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\12\3"+
    "\1\152\23\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\12\3\1\153\23\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\17\3\1\154\16\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\20\3\1\155\15\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\3\3"+
    "\1\156\32\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\17\3\1\157\16\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\15\3\1\160\20\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\10\3\1\161\25\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\32\3"+
    "\1\162\3\3\7\0\2\3\1\0\1\100\7\0\4\163"+
    "\36\100\7\0\2\100\1\0\1\131\5\0\1\164\5\0"+
    "\36\131\7\0\2\131\1\0\1\132\1\0\1\165\11\0"+
    "\36\132\7\0\2\132\1\0\1\166\13\0\36\166\7\0"+
    "\2\166\43\0\1\167\31\0\4\170\50\0\1\171\7\0"+
    "\4\172\36\171\7\0\2\171\1\0\1\3\10\0\1\37"+
    "\2\0\3\3\1\173\32\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\10\3\1\174\25\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\1\175\35\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\30\3\1\176"+
    "\5\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\1\177\35\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\20\3\1\200\15\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\12\3\1\201\23\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\12\3\1\202\23\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\3\3"+
    "\1\203\32\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\2\3\1\204\33\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\26\3\1\205\7\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\11\3\1\206\24\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\13\3"+
    "\1\207\22\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\5\3\1\210\30\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\21\3\1\211\14\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\16\3\1\212\17\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\20\3"+
    "\1\213\15\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\10\3\1\214\25\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\13\3\1\215\22\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\25\3\1\216\10\3"+
    "\7\0\2\3\1\0\1\171\7\0\4\217\36\171\7\0"+
    "\2\171\4\0\1\220\60\0\1\165\4\0\1\131\6\0"+
    "\36\165\7\0\2\165\1\0\1\166\1\0\1\221\11\0"+
    "\36\166\7\0\2\166\7\0\1\222\55\0\1\223\7\0"+
    "\4\224\36\223\7\0\2\223\1\0\1\171\7\0\1\225"+
    "\1\226\2\225\36\171\7\0\2\171\1\0\1\227\7\0"+
    "\1\172\1\230\2\172\36\227\7\0\2\227\1\0\1\3"+
    "\10\0\1\37\2\0\4\3\1\231\31\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\1\3\1\232\34\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\5\3"+
    "\1\233\30\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\27\3\1\234\6\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\4\3\1\235\31\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\10\3\1\236\25\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\2\3"+
    "\1\237\33\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\2\3\1\240\33\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\4\3\1\241\31\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\7\3\1\242\26\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\10\3"+
    "\1\243\25\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\10\3\1\244\25\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\1\3\1\245\34\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\16\3\1\246\17\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\12\3"+
    "\1\247\23\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\12\3\1\250\23\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\30\3\1\251\5\3\7\0\2\3"+
    "\1\0\1\227\7\0\1\217\1\252\2\217\36\227\7\0"+
    "\2\227\1\0\1\220\1\0\1\42\11\0\36\220\7\0"+
    "\2\220\1\0\1\253\13\0\36\253\7\0\2\253\1\0"+
    "\1\223\7\0\4\225\36\223\7\0\2\223\1\0\1\254"+
    "\7\0\1\224\1\255\2\224\36\254\7\0\2\254\1\0"+
    "\1\256\7\0\1\225\1\257\2\225\36\256\7\0\2\256"+
    "\1\0\1\256\7\0\1\224\1\255\2\224\36\256\7\0"+
    "\2\256\1\0\1\227\7\0\1\225\1\260\2\225\36\227"+
    "\7\0\2\227\1\0\1\227\7\0\4\261\36\227\7\0"+
    "\2\227\1\0\1\3\10\0\1\37\2\0\5\3\1\262"+
    "\30\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\2\3\1\263\33\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\1\264\35\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\31\3\1\265\4\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\12\3\1\266\23\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\1\267"+
    "\6\3\1\270\26\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\1\271\6\3\1\272\26\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\5\3\1\273\30\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\1\274"+
    "\35\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\14\3\1\275\21\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\12\3\1\276\23\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\2\3\1\277\33\3\7\0"+
    "\2\3\1\0\1\227\7\0\4\300\36\227\7\0\2\227"+
    "\1\0\1\253\2\0\1\301\10\0\36\253\7\0\2\253"+
    "\1\0\1\254\7\0\1\225\1\257\2\225\36\254\7\0"+
    "\2\254\1\0\1\254\7\0\4\302\36\254\7\0\2\254"+
    "\1\0\1\256\10\0\1\303\2\0\36\256\7\0\2\256"+
    "\1\0\1\256\7\0\4\304\36\256\7\0\2\256\1\0"+
    "\1\256\7\0\4\302\36\256\7\0\2\256\1\0\1\305"+
    "\7\0\4\306\36\305\7\0\2\305\1\0\1\3\10\0"+
    "\1\37\2\0\6\3\1\307\27\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\1\310\6\3\1\311\26\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\20\3"+
    "\1\312\15\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\1\3\1\313\34\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\1\314\35\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\1\3\1\315\34\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\1\316\35\3"+
    "\7\0\2\3\1\0\1\3\10\0\1\37\2\0\6\3"+
    "\1\317\27\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\1\3\1\320\34\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\12\3\1\321\23\3\7\0\2\3"+
    "\1\0\1\3\10\0\1\37\2\0\1\322\6\3\1\323"+
    "\26\3\7\0\2\3\1\0\1\305\7\0\4\324\36\305"+
    "\7\0\2\305\1\0\1\325\7\0\4\326\36\325\7\0"+
    "\2\325\11\0\4\327\50\0\1\330\7\0\4\331\36\330"+
    "\7\0\2\330\1\0\1\305\7\0\1\332\1\333\2\332"+
    "\36\305\7\0\2\305\1\0\1\334\7\0\4\306\36\334"+
    "\7\0\2\334\1\0\1\3\10\0\1\37\2\0\1\3"+
    "\1\335\34\3\7\0\2\3\1\0\1\3\10\0\1\37"+
    "\2\0\1\336\35\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\1\3\1\337\34\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\1\3\1\340\34\3\7\0"+
    "\2\3\1\0\1\3\10\0\1\37\2\0\15\3\1\341"+
    "\20\3\7\0\2\3\1\0\1\3\10\0\1\37\2\0"+
    "\1\3\1\342\34\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\1\343\35\3\7\0\2\3\1\0\1\334"+
    "\7\0\4\324\36\334\7\0\2\334\1\0\1\325\7\0"+
    "\1\332\1\344\2\332\36\325\7\0\2\325\1\0\1\345"+
    "\7\0\1\326\1\346\2\326\36\345\7\0\2\345\1\0"+
    "\1\347\7\0\4\350\36\347\7\0\2\347\1\0\1\330"+
    "\7\0\1\351\1\352\2\351\36\330\7\0\2\330\1\0"+
    "\1\353\7\0\1\331\1\354\2\331\36\353\7\0\2\353"+
    "\1\0\1\355\7\0\1\332\1\356\2\332\36\355\7\0"+
    "\2\355\1\0\1\355\7\0\1\326\1\346\2\326\36\355"+
    "\7\0\2\355\1\0\1\334\7\0\1\332\1\357\2\332"+
    "\36\334\7\0\2\334\1\0\1\3\10\0\1\37\2\0"+
    "\1\3\1\360\34\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\16\3\1\361\17\3\7\0\2\3\1\0"+
    "\1\3\10\0\1\37\2\0\1\3\1\362\34\3\7\0"+
    "\2\3\1\0\1\355\7\0\1\331\1\354\2\331\36\355"+
    "\7\0\2\355\1\0\1\345\7\0\1\332\1\356\2\332"+
    "\36\345\7\0\2\345\1\0\1\345\7\0\4\324\36\345"+
    "\7\0\2\345\1\0\1\347\7\0\4\351\36\347\7\0"+
    "\2\347\1\0\1\363\7\0\1\350\1\364\2\350\36\363"+
    "\7\0\2\363\1\0\1\365\7\0\1\351\1\366\2\351"+
    "\36\365\7\0\2\365\1\0\1\365\7\0\1\350\1\364"+
    "\2\350\36\365\7\0\2\365\1\0\1\353\7\0\1\351"+
    "\1\367\2\351\36\353\7\0\2\353\1\0\1\353\7\0"+
    "\4\370\36\353\7\0\2\353\1\0\1\355\10\0\1\371"+
    "\2\0\36\355\7\0\2\355\1\0\1\355\7\0\4\370"+
    "\36\355\7\0\2\355\1\0\1\355\7\0\4\324\36\355"+
    "\7\0\2\355\1\0\1\3\10\0\1\37\2\0\2\3"+
    "\1\372\33\3\7\0\2\3\1\0\1\363\7\0\1\351"+
    "\1\366\2\351\36\363\7\0\2\363\1\0\1\363\7\0"+
    "\4\373\36\363\7\0\2\363\1\0\1\365\10\0\1\37"+
    "\2\0\36\365\7\0\2\365\1\0\1\365\7\0\4\374"+
    "\36\365\7\0\2\365\1\0\1\365\7\0\4\373\36\365"+
    "\7\0\2\365\1\0\1\375\7\0\1\370\1\376\2\370"+
    "\36\375\7\0\2\375\11\0\4\377\50\0\1\3\10\0"+
    "\1\37\2\0\1\u0100\6\3\1\u0101\26\3\7\0\2\3"+
    "\1\0\1\u0102\7\0\1\373\1\u0103\2\373\36\u0102\7\0"+
    "\2\u0102\1\0\1\u0104\7\0\1\374\1\u0105\2\374\36\u0104"+
    "\7\0\2\u0104\1\0\1\375\7\0\1\351\1\u0106\2\351"+
    "\36\375\7\0\2\375\1\0\1\375\7\0\4\324\36\375"+
    "\7\0\2\375\1\0\1\u0107\7\0\1\373\1\u0103\2\373"+
    "\36\u0107\7\0\2\u0107\1\0\1\3\10\0\1\37\2\0"+
    "\1\3\1\u0108\34\3\7\0\2\3\1\0\1\3\10\0"+
    "\1\37\2\0\1\u0109\35\3\7\0\2\3\1\0\1\u0102"+
    "\7\0\1\351\1\u010a\2\351\36\u0102\7\0\2\u0102\1\0"+
    "\1\u0102\7\0\4\u010b\36\u0102\7\0\2\u0102\1\0\1\u0104"+
    "\10\0\1\u010c\2\0\36\u0104\7\0\2\u0104\1\0\1\u0104"+
    "\7\0\4\u010d\36\u0104\7\0\2\u0104\1\0\1\365\7\0"+
    "\4\u010b\36\365\7\0\2\365\1\0\1\u0107\7\0\1\351"+
    "\1\u010e\2\351\36\u0107\7\0\2\u0107\1\0\1\3\10\0"+
    "\1\37\2\0\1\u010f\35\3\7\0\2\3\1\0\1\3"+
    "\10\0\1\37\2\0\1\3\1\u0110\34\3\7\0\2\3"+
    "\1\0\1\365\7\0\4\u010d\36\365\7\0\2\365\1\0"+
    "\1\u0111\7\0\4\324\36\u0111\7\0\2\u0111\11\0\4\163"+
    "\50\0\1\u0112\7\0\4\u0113\36\u0112\7\0\2\u0112\1\0"+
    "\1\365\7\0\1\u0114\1\u0115\2\u0114\36\365\7\0\2\365"+
    "\1\0\1\u0111\7\0\1\332\1\u0116\2\332\36\u0111\7\0"+
    "\2\u0111\1\0\1\u0112\7\0\1\225\1\u0117\2\225\36\u0112"+
    "\7\0\2\u0112\1\0\1\u0118\7\0\1\u0113\1\u0119\2\u0113"+
    "\36\u0118\7\0\2\u0118\1\0\1\u011a\7\0\1\u011b\1\u011c"+
    "\2\u011b\36\u011a\7\0\2\u011a\1\0\1\u011a\7\0\4\u0113"+
    "\36\u011a\7\0\2\u011a\1\0\1\355\7\0\1\u0113\1\u0119"+
    "\2\u0113\36\355\7\0\2\355\1\0\1\256\7\0\1\217"+
    "\1\252\2\217\36\256\7\0\2\256\1\0\1\u0118\7\0"+
    "\1\225\1\u011d\2\225\36\u0118\7\0\2\u0118\1\0\1\u0118"+
    "\7\0\4\324\36\u0118\7\0\2\u0118\1\0\1\u011a\7\0"+
    "\1\225\1\u011e\2\225\36\u011a\7\0\2\u011a\1\0\1\u011f"+
    "\7\0\1\u011b\1\u0120\2\u011b\36\u011f\7\0\2\u011f\1\0"+
    "\1\u011f\7\0\1\u0113\1\u0119\2\u0113\36\u011f\7\0\2\u011f"+
    "\1\0\1\256\7\0\4\300\36\256\7\0\2\256\1\0"+
    "\1\256\7\0\1\u0121\1\u0122\2\u0121\36\256\7\0\2\256"+
    "\1\0\1\u011f\7\0\1\225\1\u0123\2\225\36\u011f\7\0"+
    "\2\u011f\1\0\1\u011f\7\0\4\324\36\u011f\7\0\2\u011f"+
    "\1\0\1\u0124\7\0\1\u0121\1\u0125\2\u0121\36\u0124\7\0"+
    "\2\u0124\1\0\1\u0124\7\0\1\u0126\1\u0127\2\u0126\36\u0124"+
    "\7\0\2\u0124\1\0\1\256\7\0\4\u0126\36\256\7\0"+
    "\2\256\1\0\1\u0124\10\0\1\u0128\2\0\36\u0124\7\0"+
    "\2\u0124\1\0\1\u0124\7\0\4\300\36\u0124\7\0\2\u0124"+
    "\1\0\1\u0129\7\0\1\370\1\376\2\370\36\u0129\7\0"+
    "\2\u0129\1\0\1\u0129\7\0\4\324\36\u0129\7\0\2\u0129"+
    "\11\0\4\u012a\50\0\1\u0129\7\0\1\351\1\u012b\2\351"+
    "\36\u0129\7\0\2\u0129\1\0\1\u012c\7\0\4\326\36\u012c"+
    "\7\0\2\u012c\1\0\1\365\7\0\1\u012d\1\u012e\2\u012d"+
    "\36\365\7\0\2\365\1\0\1\u012c\7\0\4\332\36\u012c"+
    "\7\0\2\u012c\1\0\1\u012f\7\0\1\326\1\346\2\326"+
    "\36\u012f\7\0\2\u012f\1\0\1\u012f\7\0\4\324\36\u012f"+
    "\7\0\2\u012f\1\0\1\u012f\7\0\1\332\1\u0130\2\332"+
    "\36\u012f\7\0\2\u012f\1\0\1\355\7\0\1\u0131\1\u0132"+
    "\2\u0131\36\355\7\0\2\355\1\0\1\u0133\7\0\1\u0131"+
    "\1\u0134\2\u0131\36\u0133\7\0\2\u0133\1\0\1\u0133\7\0"+
    "\1\370\1\376\2\370\36\u0133\7\0\2\u0133\1\0\1\u0133"+
    "\10\0\1\u0135\2\0\36\u0133\7\0\2\u0133\1\0\1\u0133"+
    "\7\0\4\324\36\u0133\7\0\2\u0133\11\0\4\u0136\50\0"+
    "\1\u0137\7\0\4\324\36\u0137\7\0\2\u0137\1\0\1\u0137"+
    "\7\0\1\332\1\u0138\2\332\36\u0137\7\0\2\u0137\1\0"+
    "\1\355\7\0\1\u011b\1\u0120\2\u011b\36\355\7\0\2\355";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14196];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\5\1\1\11\17\1\7\11\4\0\1\11"+
    "\3\0\25\1\5\0\27\1\6\0\25\1\1\0\1\1"+
    "\5\0\25\1\3\0\1\11\5\0\22\1\7\0\17\1"+
    "\1\0\1\11\4\0\17\1\1\0\1\1\2\0\16\1"+
    "\1\0\21\1\1\0\5\1\1\0\7\1\1\0\4\1"+
    "\1\0\12\1\1\0\5\1\2\0\2\1\12\0\1\1"+
    "\1\0\10\1\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
     private Symbol symbol(int type,Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return new Symbol(sym.LIST_INICIO, yychar, yyline, yytext());
          }
        case 48: break;
        case 11: 
          { return new Symbol(sym.SIGNO_RESTA, yychar, yyline, yytext());
          }
        case 49: break;
        case 35: 
          { return new Symbol(sym.TABLE_INICIO, yychar, yyline, yytext());
          }
        case 50: break;
        case 28: 
          { return new Symbol(sym.STRING, yychar, yyline, yytext());
          }
        case 51: break;
        case 39: 
          { return new Symbol(sym.LISTA, yychar, yyline, yytext());
          }
        case 52: break;
        case 31: 
          { return new Symbol(sym.ETIQUETA_COLUMNA, yychar, yyline, yytext());
          }
        case 53: break;
        case 19: 
          { return new Symbol(sym.ROW_INICIO, yychar, yyline, yytext());
          }
        case 54: break;
        case 27: 
          { return new Symbol(sym.ETIQUETA_PRUEBA, yychar, yyline, yytext());
          }
        case 55: break;
        case 2: 
          { return new Symbol(sym.error,yychar,yyline,yytext());
          }
        case 56: break;
        case 34: 
          { return new Symbol(sym.ETIQUETA_IMPRIMIR, yychar, yyline, yytext());
          }
        case 57: break;
        case 45: 
          { return new Symbol(sym.BODY_FIN, yychar, yyline, yytext());
          }
        case 58: break;
        case 14: 
          { return new Symbol(sym.AbreParentesis, yychar, yyline, yytext());
          }
        case 59: break;
        case 5: 
          { return new Symbol(sym.Numero_Decimal, yychar, yyline, yytext());
          }
        case 60: break;
        case 32: 
          { return new Symbol(sym.Email, yychar, yyline, yytext());
          }
        case 61: break;
        case 37: 
          { return new Symbol(sym.HTML_FIN, yychar, yyline, yytext());
          }
        case 62: break;
        case 41: 
          { return new Symbol(sym.TABLE_FIN, yychar, yyline, yytext());
          }
        case 63: break;
        case 24: 
          { return new Symbol(sym.NOMBRE, yychar, yyline, yytext());
          }
        case 64: break;
        case 12: 
          { return new Symbol(sym.SIGNO_MULTIPLICACION, yychar, yyline, yytext());
          }
        case 65: break;
        case 10: 
          { return new Symbol(sym.SIGNO_SUMA, yychar, yyline, yytext());
          }
        case 66: break;
        case 23: 
          { return new Symbol(sym.QUOT, yychar, yyline, yytext());
          }
        case 67: break;
        case 33: 
          { return new Symbol(sym.HTML_INICIO, yychar, yyline, yytext());
          }
        case 68: break;
        case 47: 
          { return new Symbol(sym.HEADER_FIN, yychar, yyline, yytext());
          }
        case 69: break;
        case 7: 
          { return new Symbol(sym.PUNTO_COMA, yychar, yyline, yytext());
          }
        case 70: break;
        case 46: 
          { return new Symbol(sym.HEADER_INICIO, yychar, yyline, yytext());
          }
        case 71: break;
        case 8: 
          { return new Symbol(sym.SIGNO_DIVISION, yychar, yyline, yytext());
          }
        case 72: break;
        case 18: 
          { return new Symbol(sym.IMAGEN_FOTO, yychar, yyline, yytext());
          }
        case 73: break;
        case 25: 
          { return new Symbol(sym.ETIQUETA_ENLACE, yychar, yyline, yytext());
          }
        case 74: break;
        case 38: 
          { return new Symbol(sym.ROW_FIN, yychar, yyline, yytext());
          }
        case 75: break;
        case 26: 
          { return new Symbol(sym.ETIQUETA_ALTURA, yychar, yyline, yytext());
          }
        case 76: break;
        case 16: 
          { return new Symbol(sym.DOS_PUNTOS, yychar, yyline, yytext());
          }
        case 77: break;
        case 30: 
          { return new Symbol(sym.ETIQUETA_NEGRITA, yychar, yyline, yytext());
          }
        case 78: break;
        case 22: 
          { return new Symbol(sym.ETIQUETA_BORDE, yychar, yyline, yytext());
          }
        case 79: break;
        case 43: 
          { return new Symbol(sym.BODY_INICIO, yychar, yyline, yytext());
          }
        case 80: break;
        case 13: 
          { return new Symbol(sym.Signo_Igual, yychar, yyline, yytext());
          }
        case 81: break;
        case 40: 
          { return new Symbol(sym.IMAGE_INICIO, yychar, yyline, yytext());
          }
        case 82: break;
        case 44: 
          { return new Symbol(sym.IMAGE_FIN, yychar, yyline, yytext());
          }
        case 83: break;
        case 29: 
          { return new Symbol(sym.INTEGER, yychar, yyline, yytext());
          }
        case 84: break;
        case 1: 
          { return new Symbol(sym.Link, yychar, yyline, yytext());
          }
        case 85: break;
        case 9: 
          { /*Ignore*/
          }
        case 86: break;
        case 17: 
          { return new Symbol(sym.TITLE, yychar, yyline, yytext());
          }
        case 87: break;
        case 20: 
          { return new Symbol(sym.FLOAT, yychar, yyline, yytext());
          }
        case 88: break;
        case 4: 
          { return new Symbol(sym.Numero, yychar, yyline, yytext());
          }
        case 89: break;
        case 3: 
          { return new Symbol(sym.TEXTO, yychar, yyline, yytext());
          }
        case 90: break;
        case 42: 
          { return new Symbol(sym.LIST_FIN, yychar, yyline, yytext());
          }
        case 91: break;
        case 6: 
          { return new Symbol(sym.COMILLA, yychar, yyline, yytext());
          }
        case 92: break;
        case 21: 
          { return new Symbol(sym.ETIQUETA_ANCHO, yychar, yyline, yytext());
          }
        case 93: break;
        case 15: 
          { return new Symbol(sym.CierraParentesis, yychar, yyline, yytext());
          }
        case 94: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
